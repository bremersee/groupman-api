swagger: "2.0"
info:
  title: "Groupman Model"
  version: "1.0.0"
  description: "The groupman model."
  contact:
    name: "Christian Bremer"
    email: "bremersee@googlemail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "group-controller"
  description: "The group management controller for users."
- name: "group-admin-controller"
  description: "The group management controller for administrators."
paths:
  /api/groups:
    post:
      tags:
        - "group-controller"
      summary: "Create a new group."
      operationId: "createGroup"
      parameters:
        - name: "group"
          description: "The new group."
          required: true
          in: "body"
          schema:
            $ref: "#/definitions/Group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
  /api/groups/{id}:
    get:
      tags:
      - "group-controller"
      summary: "Get a group."
      operationId: "getGroupById"
      parameters:
      - name: "id"
        description: "The group ID."
        required: true
        in: "path"
        schema:
          type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
        404:
          description: "Not Found"
          schema:
            $ref: "./META-INF/swagger/exception-model.yml#/definitions/RestApiException"
    put:
      tags:
      - "group-controller"
      summary: "Update group."
      operationId: "updateGroup"
      parameters:
      - name: "id"
        description: "The group ID."
        required: true
        in: "path"
      - name: "group"
        description: "The update data."
        required: true
        in: "body"
        schema:
          $ref: "#/definitions/Group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
        403:
          description: "Forbidden"
          schema:
            $ref: "./META-INF/swagger/exception-model.yml#/definitions/RestApiException"
        404:
          description: "Not Found"
          schema:
            $ref: "./META-INF/swagger/exception-model.yml#/definitions/RestApiException"
    delete:
      tags:
      - "group-controller"
      summary: "Delete group."
      operationId: "deleteGroup"
      parameters:
      - name: "id"
        description: "The group ID."
        required: true
        in: "path"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
        403:
          description: "Forbidden"
          schema:
            $ref: "./META-INF/swagger/exception-model.yml#/definitions/RestApiException"
  /api/groups/f:
    get:
      tags:
      - "group-controller"
      summary: "Get groups by id."
      operationId: "getGroupsByIds"
      parameters:
      - name: "id"
        description: "The group IDs."
        required: false
        in: "query"
        schema:
          type: "array"
          items:
            type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
  /api/groups/f/editable:
    get:
      tags:
      - "group-controller"
      summary: "Get editable groups."
      operationId: "getEditableGroups"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
  /api/groups/f/usable:
    get:
      tags:
      - "group-controller"
      summary: "Get usable groups."
      operationId: "getUsableGroups"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
  /api/groups/f/membership:
    get:
      tags:
      - "group-controller"
      summary: "Get membership."
      operationId: "getMembership"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
  /api/groups/f/membership-ids:
    get:
      tags:
      - "group-controller"
      summary: "Get membership IDs."
      operationId: "getMembershipIds"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GroupIdList"
  /api/admin/groups:
    get:
      tags:
      - "group-admin-controller"
      summary: "Get all groups."
      operationId: "getGroups"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
    post:
      tags:
      - "group-admin-controller"
      summary: "Create a new group."
      operationId: "createGroup"
      parameters:
      - name: "group"
        description: "The new group."
        required: true
        in: "body"
        schema:
          $ref: "#/definitions/Group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
  /api/admin/groups/{id}:
    get:
      tags:
      - "group-admin-controller"
      summary: "Get a group."
      operationId: "getGroupById"
      parameters:
      - name: "id"
        description: "The group ID."
        required: true
        in: "path"
        schema:
          type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
        404:
          description: "Not Found"
          schema:
            $ref: "./META-INF/swagger/exception-model.yml#/definitions/RestApiException"
    put:
      tags:
      - "group-admin-controller"
      summary: "Update group."
      operationId: "updateGroup"
      parameters:
      - name: "id"
        description: "The group ID."
        required: true
        in: "path"
      - name: "group"
        description: "The update data."
        required: true
        in: "body"
        schema:
          $ref: "#/definitions/Group"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
        404:
          description: "Not Found"
          schema:
            $ref: "./META-INF/swagger/exception-model.yml#/definitions/RestApiException"
    delete:
      tags:
      - "group-admin-controller"
      summary: "Delete group."
      operationId: "deleteGroup"
      parameters:
      - name: "id"
        description: "The group ID."
        required: true
        in: "path"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Group"
  /api/admin/groups/f:
    get:
      tags:
      - "group-admin-controller"
      summary: "Get groups by id."
      operationId: "getGroupsByIds"
      parameters:
      - name: "id"
        description: "The group IDs."
        required: false
        in: "query"
        schema:
          type: "array"
          items:
            type: "string"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Group"
definitions:
  Source:
    description: "The source of a group. Only administrators can use other values than 'INTERNAL'."
    type: "string"
    enum:
    - "INTERNAL"
    - "LDAP"
  Group:
    description: "A group."
    type: "object"
    properties:
      id:
        type: "string"
        description: "The id of the group."
      version:
        type: "integer"
        format: "int64"
        description: "The database version number."
      createdAt:
        type: "string"
        format: "date-time"
        description: "The creation time."
      createdBy:
        type: "string"
        description: "The user who created the group."
      source:
        $ref: "#/definitions/Source"
        default: "INTERNAL"
      name:
        type: "string"
        description: "The name of the group."
        minLength: 3
        maxLength: 75
      description:
        type: "string"
        description: "The description of the group."
        maxLength: 255
      members:
        type: "array"
        description: "The members of the group."
        items:
          type: "string"
      owners:
        type: "array"
        description: "The owners of the group."
        items:
          type: "string"
    required:
    - "name"
  GroupIdList:
    description: "A list with group identifiers."
    type: "array"
    items:
      type: "string"
